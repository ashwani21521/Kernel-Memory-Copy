diff -rupN linux-6.0.9/Makefile linux-6.0.9_modified/Makefile
--- linux-6.0.9/Makefile	2022-11-16 14:34:15.000000000 +0530
+++ linux-6.0.9_modified/Makefile	2022-11-24 16:59:07.129865067 +0530
@@ -1101,7 +1101,7 @@ export MODORDER := $(extmod_prefix)modul
 export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/
+core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ kernel_2d_memcpy_syscall/
 core-$(CONFIG_BLOCK)	+= block/
 core-$(CONFIG_IO_URING)	+= io_uring/
 
diff -rupN linux-6.0.9/arch/x86/entry/syscalls/syscall_64.tbl linux-6.0.9_modified/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-6.0.9/arch/x86/entry/syscalls/syscall_64.tbl	2022-11-16 14:34:15.000000000 +0530
+++ linux-6.0.9_modified/arch/x86/entry/syscalls/syscall_64.tbl	2022-11-24 16:48:22.009885247 +0530
@@ -372,7 +372,7 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
-
+451	common	kernel_2d_memcpy	sys_kernel_2d_memcpy
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff -rupN linux-6.0.9/kernel_2d_memcpy_syscall/Makefile linux-6.0.9_modified/kernel_2d_memcpy_syscall/Makefile
--- linux-6.0.9/kernel_2d_memcpy_syscall/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux-6.0.9_modified/kernel_2d_memcpy_syscall/Makefile	2022-11-24 16:57:27.919868170 +0530
@@ -0,0 +1 @@
+obj-y := kernel_2d_memcpy_syscall.o
diff -rupN linux-6.0.9/kernel_2d_memcpy_syscall/kernel_2d_memcpy_syscall.c linux-6.0.9_modified/kernel_2d_memcpy_syscall/kernel_2d_memcpy_syscall.c
--- linux-6.0.9/kernel_2d_memcpy_syscall/kernel_2d_memcpy_syscall.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-6.0.9_modified/kernel_2d_memcpy_syscall/kernel_2d_memcpy_syscall.c	2022-11-24 16:56:18.159870352 +0530
@@ -0,0 +1,17 @@
+#include<linux/kernel.h>
+#include<linux/syscalls.h>
+
+
+SYSCALL_DEFINE4(kernel_2d_memcpy, float **, src, float**, dest, int,rows,int, cols)
+{
+	float buffer[5][5];
+	if(__copy_from_user(buffer,src,rows*cols*sizeof(float))){
+		return -EFAULT;
+	}
+
+	if(__copy_to_user(dest,buffer,rows*cols*sizeof(float))){
+		return -EFAULT;
+	}
+
+	return 0;
+}
